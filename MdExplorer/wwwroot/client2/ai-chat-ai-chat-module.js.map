{"version":3,"sources":["./src/app/ai-chat/model-manager.component.ts","./src/app/ai-chat/model-manager.component.html","./src/app/ai-chat/ai-chat.module.ts","./src/app/ai-chat/ai-chat.component.ts","./src/app/ai-chat/ai-chat.component.html","./src/app/services/ai-chat.service.ts"],"names":[],"mappings":"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","file":"ai-chat-ai-chat-module.js","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { AiChatService, ModelInfo, DownloadProgress } from '../services/ai-chat.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-model-manager',\n  templateUrl: './model-manager.component.html',\n  styleUrls: ['./model-manager.component.scss']\n})\nexport class ModelManagerComponent implements OnInit, OnDestroy {\n  availableModels: ModelInfo[] = [];\n  downloadProgress: { [modelId: string]: DownloadProgress } = {};\n  currentModel: string | null = null;\n  isModelLoaded = false;\n  loading = false;\n  \n  private destroy$ = new Subject<void>();\n\n  constructor(private aiService: AiChatService) {}\n\n  ngOnInit(): void {\n    this.loadModels();\n    \n    // Subscribe to download progress\n    this.aiService.downloadProgress$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(progress => {\n        this.downloadProgress[progress.modelId] = progress;\n      });\n    \n    // Subscribe to current model\n    this.aiService.currentModel$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(model => {\n        this.currentModel = model;\n      });\n    \n    // Subscribe to model loaded status\n    this.aiService.isModelLoaded$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(loaded => {\n        this.isModelLoaded = loaded;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  loadModels(): void {\n    this.loading = true;\n    this.aiService.getAvailableModels().subscribe({\n      next: (models) => {\n        this.availableModels = models;\n        this.loading = false;\n      },\n      error: (err) => {\n        console.error('Error loading models:', err);\n        this.loading = false;\n      }\n    });\n  }\n\n  downloadModel(model: ModelInfo): void {\n    if (this.isDownloading(model.id)) return;\n    \n    this.downloadProgress[model.id] = {\n      modelId: model.id,\n      bytesDownloaded: 0,\n      totalBytes: model.fileSize,\n      percentComplete: 0,\n      status: 'Starting'\n    };\n    \n    this.aiService.downloadModel(model.id).subscribe({\n      next: () => {\n        console.log(`Download started for ${model.name}`);\n      },\n      error: (err) => {\n        console.error(`Error downloading ${model.name}:`, err);\n        delete this.downloadProgress[model.id];\n      }\n    });\n  }\n\n  deleteModel(model: ModelInfo): void {\n    if (!confirm(`Delete model ${model.name}?`)) return;\n    \n    this.aiService.deleteModel(model.id).subscribe({\n      next: () => {\n        this.loadModels();\n      },\n      error: (err) => {\n        console.error(`Error deleting ${model.name}:`, err);\n      }\n    });\n  }\n\n  loadModel(model: ModelInfo): void {\n    console.log('[ModelManager] loadModel() called with:', model);\n    if (!model.isInstalled) {\n      console.log('[ModelManager] Model not installed, returning');\n      return;\n    }\n    \n    console.log('[ModelManager] Starting to load model:', model.id);\n    this.loading = true;\n    this.aiService.loadModel(model.id).subscribe({\n      next: (response) => {\n        console.log(`[ModelManager] Model ${model.name} loaded successfully, response:`, response);\n        this.loading = false;\n        // Refresh models list to update status\n        this.loadModels();\n      },\n      error: (err) => {\n        console.error(`[ModelManager] Error loading ${model.name}:`, err);\n        console.error('[ModelManager] Error details:', err.error || err);\n        this.loading = false;\n      }\n    });\n  }\n\n  isDownloading(modelId: string): boolean {\n    const progress = this.downloadProgress[modelId];\n    return progress && progress.status !== 'Error' && progress.status !== 'Cancelled' && progress.percentComplete < 100;\n  }\n\n  formatBytes(bytes: number): string {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  }\n\n  isCurrentModel(model: ModelInfo): boolean {\n    return this.currentModel === model.fileName?.replace('.gguf', '');\n  }\n}","<div class=\"model-manager\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>AI Model Manager</mat-card-title>\n      <mat-card-subtitle>\n        <span *ngIf=\"isModelLoaded && currentModel\">\n          Current Model: {{ currentModel }}\n        </span>\n        <span *ngIf=\"!isModelLoaded\">\n          No model loaded\n        </span>\n      </mat-card-subtitle>\n    </mat-card-header>\n    \n    <mat-card-content>\n      <div class=\"actions-bar\">\n        <button mat-raised-button color=\"primary\" (click)=\"loadModels()\" [disabled]=\"loading\">\n          <mat-icon>refresh</mat-icon>\n          Refresh\n        </button>\n      </div>\n\n      <mat-progress-bar *ngIf=\"loading\" mode=\"indeterminate\"></mat-progress-bar>\n\n      <div class=\"models-grid\">\n        <mat-card *ngFor=\"let model of availableModels\" class=\"model-card\">\n          <mat-card-header>\n            <mat-card-title>{{ model.name }}</mat-card-title>\n            <mat-card-subtitle>\n              {{ model.parameters }} parameters | {{ model.contextLength }} context\n            </mat-card-subtitle>\n          </mat-card-header>\n          \n          <mat-card-content>\n            <p class=\"model-description\">{{ model.description }}</p>\n            \n            <div class=\"model-info\">\n              <span class=\"file-size\">Size: {{ formatBytes(model.fileSize) }}</span>\n              <mat-chip-list>\n                <mat-chip *ngIf=\"model.isInstalled\" color=\"primary\" selected>\n                  <mat-icon>check_circle</mat-icon>\n                  Installed\n                </mat-chip>\n                <mat-chip *ngIf=\"isCurrentModel(model)\" color=\"accent\" selected>\n                  <mat-icon>memory</mat-icon>\n                  Loaded\n                </mat-chip>\n              </mat-chip-list>\n            </div>\n\n            <!-- Download Progress -->\n            <div *ngIf=\"isDownloading(model.id)\" class=\"download-progress\">\n              <div class=\"progress-info\">\n                <span>{{ downloadProgress[model.id].status }}</span>\n                <span>{{ downloadProgress[model.id].percentComplete | number:'1.1-1' }}%</span>\n              </div>\n              <mat-progress-bar \n                mode=\"determinate\" \n                [value]=\"downloadProgress[model.id].percentComplete\">\n              </mat-progress-bar>\n              <div class=\"progress-bytes\">\n                {{ formatBytes(downloadProgress[model.id].bytesDownloaded) }} / \n                {{ formatBytes(downloadProgress[model.id].totalBytes) }}\n              </div>\n            </div>\n          </mat-card-content>\n          \n          <mat-card-actions>\n            <button \n              mat-button \n              color=\"primary\"\n              *ngIf=\"!model.isInstalled && !isDownloading(model.id)\"\n              (click)=\"downloadModel(model)\">\n              <mat-icon>download</mat-icon>\n              Download\n            </button>\n            \n            <button \n              mat-button \n              color=\"accent\"\n              *ngIf=\"model.isInstalled && !isCurrentModel(model)\"\n              (click)=\"loadModel(model)\"\n              [disabled]=\"loading\">\n              <mat-icon>play_arrow</mat-icon>\n              Load\n            </button>\n            \n            <button \n              mat-button \n              color=\"warn\"\n              *ngIf=\"model.isInstalled && !isCurrentModel(model)\"\n              (click)=\"deleteModel(model)\">\n              <mat-icon>delete</mat-icon>\n              Delete\n            </button>\n            \n            <button \n              mat-button \n              disabled\n              *ngIf=\"isCurrentModel(model)\">\n              <mat-icon>check</mat-icon>\n              Currently Loaded\n            </button>\n          </mat-card-actions>\n        </mat-card>\n      </div>\n\n      <div *ngIf=\"availableModels.length === 0 && !loading\" class=\"no-models\">\n        <mat-icon>info</mat-icon>\n        <p>No models available</p>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\n\n// Angular Material\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n// Components\nimport { AiChatComponent } from './ai-chat.component';\nimport { ModelManagerComponent } from './model-manager.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AiChatComponent\n  }\n];\n\n@NgModule({\n  declarations: [\n    AiChatComponent,\n    ModelManagerComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(routes),\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTooltipModule\n  ],\n  exports: [\n    AiChatComponent,\n    ModelManagerComponent\n  ]\n})\nexport class AiChatModule { }","import { Component, OnInit, OnDestroy, ViewChild, ElementRef, AfterViewChecked } from '@angular/core';\nimport { AiChatService, ChatMessage } from '../services/ai-chat.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-ai-chat',\n  templateUrl: './ai-chat.component.html',\n  styleUrls: ['./ai-chat.component.scss']\n})\nexport class AiChatComponent implements OnInit, OnDestroy, AfterViewChecked {\n  @ViewChild('scrollContainer') private scrollContainer: ElementRef;\n  @ViewChild('messageInput') private messageInput: ElementRef;\n  \n  messages: ChatMessage[] = [];\n  inputMessage = '';\n  isModelLoaded = false;\n  currentModel: string | null = null;\n  showModelManager = false;\n  \n  private destroy$ = new Subject<void>();\n  private shouldScrollToBottom = false;\n\n  constructor(private aiService: AiChatService) {}\n\n  ngOnInit(): void {\n    console.log('[AiChatComponent] Component initialized');\n    \n    // Log container dimensions after view is rendered\n    setTimeout(() => {\n      const container = document.querySelector('.ai-chat-container') as HTMLElement;\n      if (container) {\n        console.log('[AiChatComponent] Container dimensions:', {\n          height: container.offsetHeight,\n          width: container.offsetWidth,\n          clientHeight: container.clientHeight,\n          scrollHeight: container.scrollHeight,\n          computedStyle: window.getComputedStyle(container).height,\n          parentElement: container.parentElement?.tagName,\n          parentHeight: container.parentElement?.offsetHeight\n        });\n      }\n      \n      const inputContainer = document.querySelector('.chat-input-container') as HTMLElement;\n      if (inputContainer) {\n        console.log('[AiChatComponent] Input container:', {\n          height: inputContainer.offsetHeight,\n          offsetTop: inputContainer.offsetTop,\n          bottomPosition: inputContainer.offsetTop + inputContainer.offsetHeight,\n          visible: (inputContainer.offsetTop + inputContainer.offsetHeight) <= window.innerHeight,\n          windowHeight: window.innerHeight\n        });\n      }\n      \n      const messageInput = document.querySelector('textarea[matInput]') as HTMLElement;\n      if (messageInput) {\n        console.log('[AiChatComponent] Textarea found:', {\n          height: messageInput.offsetHeight,\n          offsetTop: messageInput.offsetTop,\n          disabled: (messageInput as HTMLTextAreaElement).disabled,\n          placeholder: (messageInput as HTMLTextAreaElement).placeholder\n        });\n      } else {\n        console.log('[AiChatComponent] WARNING: Textarea NOT found!');\n      }\n      \n      // Check parent container\n      const routerOutlet = document.querySelector('router-outlet');\n      if (routerOutlet && routerOutlet.parentElement) {\n        console.log('[AiChatComponent] Router outlet parent:', {\n          tagName: routerOutlet.parentElement.tagName,\n          className: routerOutlet.parentElement.className,\n          height: (routerOutlet.parentElement as HTMLElement).offsetHeight\n        });\n      }\n    }, 1000);\n    \n    // Subscribe to messages\n    this.aiService.messages$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(messages => {\n        this.messages = messages;\n        this.shouldScrollToBottom = true;\n      });\n    \n    // Subscribe to model status\n    this.aiService.isModelLoaded$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(loaded => {\n        console.log('[AiChatComponent] Model loaded status:', loaded);\n        this.isModelLoaded = loaded;\n      });\n    \n    // Subscribe to current model\n    this.aiService.currentModel$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(model => {\n        console.log('[AiChatComponent] Current model:', model);\n        this.currentModel = model;\n      });\n  }\n\n  ngAfterViewChecked(): void {\n    if (this.shouldScrollToBottom) {\n      this.scrollToBottom();\n      this.shouldScrollToBottom = false;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  sendMessage(): void {\n    if (!this.inputMessage.trim() || !this.isModelLoaded) return;\n    \n    this.aiService.sendMessage(this.inputMessage);\n    this.inputMessage = '';\n    this.focusInput();\n  }\n\n  handleKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      this.sendMessage();\n    }\n  }\n\n  clearChat(): void {\n    if (confirm('Clear all messages?')) {\n      this.aiService.clearMessages();\n    }\n  }\n\n  toggleModelManager(): void {\n    this.showModelManager = !this.showModelManager;\n  }\n\n  private scrollToBottom(): void {\n    try {\n      this.scrollContainer.nativeElement.scrollTop = this.scrollContainer.nativeElement.scrollHeight;\n    } catch(err) {}\n  }\n\n  private focusInput(): void {\n    setTimeout(() => {\n      if (this.messageInput) {\n        this.messageInput.nativeElement.focus();\n      }\n    }, 100);\n  }\n\n  formatMessageContent(content: string): string {\n    // Basic markdown-like formatting\n    return content\n      .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>')\n      .replace(/`([^`]+)`/g, '<code>$1</code>')\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n      .replace(/\\n/g, '<br>');\n  }\n\n  getMessageClass(message: ChatMessage): string {\n    return `message message-${message.role}`;\n  }\n\n  getAvatarIcon(role: string): string {\n    switch(role) {\n      case 'user':\n        return 'person';\n      case 'assistant':\n        return 'smart_toy';\n      case 'system':\n        return 'info';\n      default:\n        return 'chat_bubble';\n    }\n  }\n}","<div class=\"ai-chat-container\">\n  <!-- Header -->\n  <mat-toolbar color=\"primary\" class=\"chat-header\">\n    <mat-icon>smart_toy</mat-icon>\n    <span class=\"header-title\">AI Assistant</span>\n    \n    <span class=\"spacer\"></span>\n    \n    <div class=\"model-status\">\n      <mat-chip-list>\n        <mat-chip *ngIf=\"isModelLoaded\" color=\"accent\" selected>\n          <mat-icon>check_circle</mat-icon>\n          {{ currentModel || 'Model Loaded' }}\n        </mat-chip>\n        <mat-chip *ngIf=\"!isModelLoaded\" color=\"warn\">\n          <mat-icon>warning</mat-icon>\n          No Model\n        </mat-chip>\n      </mat-chip-list>\n    </div>\n    \n    <button mat-icon-button (click)=\"toggleModelManager()\" matTooltip=\"Model Manager\">\n      <mat-icon>settings</mat-icon>\n    </button>\n    \n    <button mat-icon-button (click)=\"clearChat()\" matTooltip=\"Clear Chat\">\n      <mat-icon>clear_all</mat-icon>\n    </button>\n  </mat-toolbar>\n\n  <!-- Model Manager Panel -->\n  <div class=\"model-manager-panel\" *ngIf=\"showModelManager\">\n    <app-model-manager></app-model-manager>\n  </div>\n\n  <!-- Chat Messages -->\n  <div class=\"chat-messages\" #scrollContainer>\n    <div *ngIf=\"messages.length === 0\" class=\"no-messages\">\n      <mat-icon>chat_bubble_outline</mat-icon>\n      <p>Start a conversation with the AI assistant</p>\n      <p class=\"hint\" *ngIf=\"!isModelLoaded\">\n        Please load a model first using the settings button above\n      </p>\n    </div>\n\n    <div *ngFor=\"let message of messages\" [ngClass]=\"getMessageClass(message)\">\n      <div class=\"message-avatar\">\n        <mat-icon>{{ getAvatarIcon(message.role) }}</mat-icon>\n      </div>\n      \n      <div class=\"message-content\">\n        <div class=\"message-header\">\n          <span class=\"message-role\">{{ message.role | titlecase }}</span>\n          <span class=\"message-time\">{{ message.timestamp | date:'short' }}</span>\n        </div>\n        \n        <div class=\"message-text\" [innerHTML]=\"formatMessageContent(message.content)\"></div>\n        \n        <mat-progress-spinner \n          *ngIf=\"message.isStreaming\" \n          diameter=\"20\" \n          mode=\"indeterminate\">\n        </mat-progress-spinner>\n      </div>\n    </div>\n  </div>\n\n  <!-- Input Area -->\n  <div class=\"chat-input-container\">\n    <mat-form-field appearance=\"outline\" class=\"chat-input\">\n      <textarea\n        matInput\n        #messageInput\n        [(ngModel)]=\"inputMessage\"\n        (keydown)=\"handleKeyDown($event)\"\n        placeholder=\"Type your message... (Shift+Enter for new line)\"\n        rows=\"3\"\n        [disabled]=\"!isModelLoaded\">\n      </textarea>\n      <mat-hint *ngIf=\"!isModelLoaded\">Load a model to start chatting</mat-hint>\n    </mat-form-field>\n    \n    <button \n      mat-fab \n      color=\"primary\" \n      (click)=\"sendMessage()\"\n      [disabled]=\"!inputMessage.trim() || !isModelLoaded\"\n      class=\"send-button\">\n      <mat-icon>send</mat-icon>\n    </button>\n  </div>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\n\nexport interface ModelInfo {\n  id: string;\n  name: string;\n  description: string;\n  url: string;\n  fileName: string;\n  fileSize: number;\n  isInstalled: boolean;\n  localPath?: string;\n  contextLength: number;\n  parameters: string;\n}\n\nexport interface DownloadProgress {\n  modelId: string;\n  bytesDownloaded: number;\n  totalBytes: number;\n  percentComplete: number;\n  status: string;\n}\n\nexport interface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  isStreaming?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiChatService {\n  private hubConnection: HubConnection;\n  private baseUrl = '/api/AiModels';\n  \n  private _messages$ = new BehaviorSubject<ChatMessage[]>([]);\n  public messages$ = this._messages$.asObservable();\n  \n  private _downloadProgress$ = new Subject<DownloadProgress>();\n  public downloadProgress$ = this._downloadProgress$.asObservable();\n  \n  private _currentModel$ = new BehaviorSubject<string | null>(null);\n  public currentModel$ = this._currentModel$.asObservable();\n  \n  private _isModelLoaded$ = new BehaviorSubject<boolean>(false);\n  public isModelLoaded$ = this._isModelLoaded$.asObservable();\n  \n  private _streamingMessage$ = new Subject<string>();\n  public streamingMessage$ = this._streamingMessage$.asObservable();\n  \n  private currentStreamingMessageId: string | null = null;\n\n  constructor(private http: HttpClient) {\n    this.initializeSignalR();\n  }\n\n  private initializeSignalR(): void {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl('/signalr/aichat')\n      .configureLogging(LogLevel.Information)\n      .withAutomaticReconnect()\n      .build();\n\n    // Setup event handlers\n    this.hubConnection.on('DownloadProgress', (progress: DownloadProgress) => {\n      this._downloadProgress$.next(progress);\n    });\n\n    this.hubConnection.on('DownloadComplete', (modelId: string) => {\n      console.log(`Model ${modelId} download complete`);\n      this.getAvailableModels().subscribe(); // Refresh model list\n    });\n\n    this.hubConnection.on('DownloadError', (modelId: string, error: string) => {\n      console.error(`Model ${modelId} download error:`, error);\n    });\n\n    this.hubConnection.on('ModelLoaded', (modelName: string) => {\n      console.log('[AiChatService] Received ModelLoaded event:', modelName);\n      this._currentModel$.next(modelName);\n      this._isModelLoaded$.next(true);\n    });\n    \n    this.hubConnection.on('ModelLoading', (modelName: string) => {\n      console.log('[AiChatService] Received ModelLoading event:', modelName);\n    });\n\n    this.hubConnection.on('ModelLoadError', (error: string) => {\n      console.error('[AiChatService] Received ModelLoadError event:', error);\n      this._isModelLoaded$.next(false);\n    });\n\n    this.hubConnection.on('ReceiveMessage', (role: string, content: string) => {\n      this.addMessage(role as 'system' | 'assistant', content);\n    });\n\n    this.hubConnection.on('ReceiveStreamChunk', (chunk: string) => {\n      this._streamingMessage$.next(chunk);\n      this.appendToStreamingMessage(chunk);\n    });\n\n    this.hubConnection.on('StreamComplete', () => {\n      this.finalizeStreamingMessage();\n    });\n\n    this.hubConnection.on('ReceiveError', (error: string) => {\n      console.error('Chat error:', error);\n      this.addMessage('system', `Error: ${error}`);\n    });\n\n    // Start connection\n    this.startConnection();\n  }\n\n  private async startConnection(): Promise<void> {\n    try {\n      await this.hubConnection.start();\n      console.log('SignalR connection established');\n      await this.getModelStatus();\n    } catch (err) {\n      console.error('Error establishing SignalR connection:', err);\n      setTimeout(() => this.startConnection(), 5000);\n    }\n  }\n\n  // Model Management\n  getAvailableModels(): Observable<ModelInfo[]> {\n    return this.http.get<ModelInfo[]>(`${this.baseUrl}/available`);\n  }\n\n  getInstalledModels(): Observable<ModelInfo[]> {\n    return this.http.get<ModelInfo[]>(`${this.baseUrl}/installed`);\n  }\n\n  downloadModel(modelId: string): Observable<any> {\n    return this.http.post(`${this.baseUrl}/download/${modelId}`, {});\n  }\n\n  deleteModel(modelId: string): Observable<any> {\n    return this.http.delete(`${this.baseUrl}/${modelId}`);\n  }\n\n  loadModel(modelId: string): Observable<any> {\n    console.log('[AiChatService] loadModel() called with modelId:', modelId);\n    console.log('[AiChatService] HubConnection state:', this.hubConnection.state);\n    \n    if (this.hubConnection.state === 'Connected') {\n      console.log('[AiChatService] Using SignalR to load model');\n      return new Observable(observer => {\n        this.hubConnection.invoke('LoadModel', modelId)\n          .then((response) => {\n            console.log('[AiChatService] SignalR LoadModel success, response:', response);\n            observer.next(response);\n            observer.complete();\n          })\n          .catch(err => {\n            console.error('[AiChatService] SignalR LoadModel error:', err);\n            observer.error(err);\n          });\n      });\n    }\n    \n    console.log('[AiChatService] Using HTTP POST to load model');\n    return this.http.post(`${this.baseUrl}/load/${modelId}`, {});\n  }\n\n  async getModelStatus(): Promise<void> {\n    if (this.hubConnection.state === 'Connected') {\n      try {\n        const status = await this.hubConnection.invoke('GetModelStatus');\n        this._isModelLoaded$.next(status.isModelLoaded);\n        this._currentModel$.next(status.currentModel);\n      } catch (err) {\n        console.error('Error getting model status:', err);\n      }\n    }\n  }\n\n  // Chat functionality\n  sendMessage(message: string): void {\n    if (!message.trim()) return;\n    \n    // Add user message\n    this.addMessage('user', message);\n    \n    // Create placeholder for assistant response\n    const assistantMessageId = this.generateMessageId();\n    this.currentStreamingMessageId = assistantMessageId;\n    this.addMessage('assistant', '', assistantMessageId, true);\n    \n    // Send to server\n    if (this.hubConnection.state === 'Connected') {\n      this.hubConnection.invoke('SendMessage', message)\n        .catch(err => {\n          console.error('Error sending message:', err);\n          this.addMessage('system', `Failed to send message: ${err}`);\n        });\n    }\n  }\n\n  private addMessage(role: 'user' | 'assistant' | 'system', content: string, id?: string, isStreaming?: boolean): void {\n    const messages = this._messages$.value;\n    const newMessage: ChatMessage = {\n      id: id || this.generateMessageId(),\n      role,\n      content,\n      timestamp: new Date(),\n      isStreaming\n    };\n    this._messages$.next([...messages, newMessage]);\n  }\n\n  private appendToStreamingMessage(chunk: string): void {\n    if (!this.currentStreamingMessageId) return;\n    \n    const messages = this._messages$.value;\n    const messageIndex = messages.findIndex(m => m.id === this.currentStreamingMessageId);\n    \n    if (messageIndex !== -1) {\n      messages[messageIndex].content += chunk;\n      this._messages$.next([...messages]);\n    }\n  }\n\n  private finalizeStreamingMessage(): void {\n    if (!this.currentStreamingMessageId) return;\n    \n    const messages = this._messages$.value;\n    const messageIndex = messages.findIndex(m => m.id === this.currentStreamingMessageId);\n    \n    if (messageIndex !== -1) {\n      messages[messageIndex].isStreaming = false;\n      this._messages$.next([...messages]);\n    }\n    \n    this.currentStreamingMessageId = null;\n  }\n\n  clearMessages(): void {\n    this._messages$.next([]);\n  }\n\n  private generateMessageId(): string {\n    return `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  ngOnDestroy(): void {\n    if (this.hubConnection) {\n      this.hubConnection.stop();\n    }\n  }\n}"],"sourceRoot":"webpack:///"}