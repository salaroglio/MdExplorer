{"version":3,"sources":["./src/app/shared/material.module.ts","./src/app/signalR/dialogs/connection-lost/connection-lost.component.ts","./src/app/signalR/dialogs/connection-lost/connection-lost.component.html","./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/services/app-current-folder.service.ts","./src/app/Models/MdSettings.ts","./src/app/signalR/dialogs/parsing-project/parsing-project.provider.ts","./src/app/app.module.ts","./src/app/signalR/dialogs/connection-lost/connection-lost.provider.ts","./src/app/signalR/dialogs/parsing-project/parsing-project.component.ts","./src/app/signalR/dialogs/parsing-project/parsing-project.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core'\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  exports: [\r\n    MatAutocompleteModule,\r\n    MatCheckboxModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatMenuModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatListModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n    MatTreeModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatBadgeModule,\r\n    MatChipsModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatProgressBarModule,\r\n    MatRippleModule,\r\n    MatBottomSheetModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatTooltipModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    \r\n  ]\r\n})\r\nexport class MaterialModule { }\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n//import { MdFile } from '../../../models/md-file';\r\nimport { MonitorMDService } from '../../../md-explorer/services/monitor-md.service'; //../../../compoments/services/monitor-md.service\r\n\r\n@Component({\r\n  selector: 'app-connection-lost',\r\n  templateUrl: './connection-lost.component.html',\r\n  styleUrls: ['./connection-lost.component.scss']\r\n})\r\nexport class ConnectionLostComponent implements OnInit {\r\n  //private _this: any;\r\n  public _HideImg = true;\r\n\r\n  constructor(\r\n    //@Inject(MAT_DIALOG_DATA) public data: MdFile,\r\n    //private monitorMDService: MonitorMDService,    \r\n    private dialogRef: MatDialogRef<ConnectionLostComponent>){\r\n\r\n    dialogRef.disableClose = true;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  refresh() {\r\n    //this.monitorMDService.startConnection();\r\n    this.dialogRef.close();\r\n  }\r\n    \r\n\r\n\r\n}\r\n","<mat-dialog-content>\r\n  <div>\r\n      <img style=\"left:0px; right:0px; margin-left:auto;width:500px; margin-right:auto\" src=\"/assets/ConnectionLost.png\" />\r\n  </div>\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n  <button mat-button color=\"primary\" (click)=\"refresh()\">\r\n    <mat-icon>refresh</mat-icon>re-link\r\n  </button>  \r\n</mat-dialog-actions>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, HostListener } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AppCurrentFolderService } from './services/app-current-folder.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n}) \r\nexport class AppComponent {\r\n  @HostListener('window:unload', ['$event'])\r\n  unloadHandler(event) {\r\n    // E' stato dato il comando di chiusura del tab o di chrome\r\n    // spegni il serverino che si è acceso\r\n    if (performance.navigation.type != performance.navigation.TYPE_RELOAD) {\r\n      //this.currentFolder.killServer();\r\n    }\r\n    \r\n    //\r\n  }\r\n  title = 'client2';\r\n  constructor(private titleService: Title,\r\n    private currentFolder: AppCurrentFolderService,\r\n    private route: ActivatedRoute,\r\n    private router: Router) {\r\n    \r\n    currentFolder.folderName.subscribe((data: any) => {      \r\n      this.titleService.setTitle(data.currentFolder);\r\n    });\r\n    currentFolder.loadFolderName();\r\n    \r\n  }\r\n}\r\n","<router-outlet></router-outlet>\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { IMdSetting } from '../Models/IMdSetting';\r\nimport { MdSetting } from '../Models/MdSettings';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppCurrentFolderService {\r\n\r\n  private _folderName: BehaviorSubject<string>;\r\n  private _Settings: BehaviorSubject<IMdSetting[]>;\r\n\r\n\r\n  private dataStore: {\r\n    folderName: string\r\n    settings: IMdSetting[]\r\n  }\r\n\r\n  constructor(private http: HttpClient) {\r\n    \r\n    this.dataStore = {\r\n      folderName: 'test', settings: [new MdSetting({ id:'test', name: 'PlantumlServer' })]}\r\n    this._folderName = new BehaviorSubject<string>('test');\r\n    this._Settings = new BehaviorSubject<IMdSetting[]>([]);\r\n    console.log('AppCurrentFolderService constructor');\r\n  }\r\n\r\n  get folderName(): Observable<string> {\r\n    return this._folderName.asObservable();\r\n  }\r\n\r\n  get settings(): Observable<IMdSetting[]> {\r\n    return this._Settings.asObservable();\r\n  }\r\n\r\n  loadFolderName() {\r\n    const url = '../api/AppSettings/GetCurrentFolder';\r\n    return this.http.get<string>(url)\r\n      .subscribe(data => {\r\n        this.dataStore.folderName = data;\r\n        this._folderName.next(Object.assign({},this.dataStore).folderName);\r\n      },\r\n        error => {\r\n          console.log(\"failed to fetch working folder name\");\r\n        }\r\n      );\r\n  }\r\n\r\n  loadSettings() {\r\n    const url = '../api/AppSettings/GetSettings';\r\n    return this.http.get<IMdSetting[]>(url)\r\n      .subscribe(data => {\r\n        this.dataStore.settings = data;\r\n        this._Settings.next(Object.assign({}, this.dataStore).settings);\r\n      }\r\n        , error => {\r\n\r\n        });\r\n  }\r\n\r\n  saveSettings() {\r\n    const url = '../api/AppSettings/SetSettings';    \r\n    var test = { settings: this.dataStore.settings };\r\n    return this.http.post<IMdSetting[]>(url, this.dataStore.settings);\r\n  }\r\n\r\n  killServer() {\r\n    const url = '../api/AppSettings/KillServer';\r\n    debugger;\r\n    return this.http.get(url).subscribe(data => {\r\n      debugger;\r\n    });\r\n  }\r\n\r\n}\r\n","import { IMdSetting } from \"./IMdSetting\";\r\n\r\nexport class MdSetting implements IMdSetting {\r\n\r\n  public constructor(init?: Partial<MdSetting>) {\r\n    Object.assign(this, init);\r\n  }\r\n  id: string;\r\n  name: string;\r\n  intValue?: number;\r\n  stringValue?: string;\r\n  dateTimeValue?: Date;\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ParsingProjectComponent } from \"./parsing-project.component\";\r\n\r\n@Injectable()\r\nexport class ParsingProjectProvider {\r\n\r\n  private _dialogRef: MatDialogRef<ParsingProjectComponent>;\r\n\r\n  constructor(\r\n              private dialog: MatDialog) {\r\n  }\r\n\r\n  show(data:any): ParsingProjectProvider {\r\n    this._dialogRef = this.dialog.open(ParsingProjectComponent, {\r\n      data: data\r\n    });\r\n    return this;\r\n  }\r\n\r\n  hide(data: any): void {\r\n    this._dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n//import { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MaterialModule } from \"./shared/material.module\";\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ParsingProjectProvider } from './signalR/dialogs/parsing-project/parsing-project.provider';\r\nimport { ConnectionLostProvider } from './signalR/dialogs/connection-lost/connection-lost.provider';\r\n\r\nconst routes: Routes = [\r\n  { path: 'main', loadChildren: () => import('./md-explorer/md-explorer.module').then(m => m.MdExplorerModule) },\r\n  { path: 'projects', loadChildren: () => import('./projects/projects.module').then(m => m.ProjectsModule) },\r\n  { path: '**', redirectTo: 'projects' }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    RouterModule.forRoot(routes ), //\r\n    FlexLayoutModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,    \r\n    \r\n  ],\r\n  providers: [ParsingProjectProvider,\r\n               ConnectionLostProvider ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n  constructor() {\r\n    console.log('AppModuleConstructor');\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MonitorMDService } from \"../../../md-explorer/services/monitor-md.service\";\r\nimport { ConnectionLostComponent } from \"./connection-lost.component\";\r\n\r\n\r\n@Injectable()\r\nexport class ConnectionLostProvider {\r\n\r\n  private _dialogRef: MatDialogRef<ConnectionLostComponent>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog) {\r\n  }\r\n\r\n  show(hub: MonitorMDService): ConnectionLostProvider {\r\n    this._dialogRef = this.dialog.open(ConnectionLostComponent, {\r\n      data: null\r\n    });\r\n    this._dialogRef.afterClosed().subscribe(_ => {\r\n      hub.startConnection();\r\n    });\r\n    return this;\r\n  }\r\n\r\n  hide(data: any): void {\r\n    this._dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-parsing-project',\r\n  templateUrl: './parsing-project.component.html',\r\n  styleUrls: ['./parsing-project.component.scss']\r\n})\r\nexport class ParsingProjectComponent implements OnInit {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private dialogRef: MatDialogRef<ParsingProjectComponent>\r\n  ) {\r\n    dialogRef.disableClose = true;\r\n}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h1>parsing-project works!</h1>\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}