import { HttpClient } from '@angular/common/http';
import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { RenameFileComponent } from '../refactoring/rename-file/rename-file.component';
import { MdFileService } from '../../services/md-file.service';
import { RulesComponent } from '../../../signalR/dialogs/rules/rules.component';
import { MdFile } from '../../models/md-file';
import { GITService } from '../../../git/services/gitservice.service';
import { AppCurrentMetadataService } from '../../../services/app-current-metadata.service';
import { MatMenuTrigger } from '@angular/material/menu';
import { IBranch } from '../../../git/models/branch';
import { MatTabGroup } from '@angular/material/tabs';
import { ITag } from '../../../git/models/Tag';
import { ProjectsService } from '../../services/projects.service';
import { Router } from '@angular/router';
import { WaitingDialogService } from '../../../commons/waitingdialog/waiting-dialog.service';
import { WaitingDialogInfo } from '../../../commons/waitingdialog/waiting-dialog/models/WaitingDialogInfo';
import { GitMessagesComponent } from '../../../git/components/git-messages/git-messages.component';
import { CommitMessageDialogComponent } from '../../../git/dialogs/commit-message-dialog/commit-message-dialog.component';
import { BookmarksService } from '../../services/bookmarks.service';
import { MdServerMessagesService } from '../../../signalR/services/server-messages.service';
import { Bookmark } from '../../services/Types/Bookmark';
import { MdNavigationService } from '../../services/md-navigation.service';
import { Subscription, forkJoin } from 'rxjs';
import { FileNameAndAuthor } from '../../../git/models/DataToPull';
import _ from 'lodash';


@Component({
  selector: 'app-toolbar',
  templateUrl: './toolbar.component.html',
  styleUrls: ['./toolbar.component.scss'],
})
export class ToolbarComponent implements OnInit, OnDestroy {

  public currentBranch: string;
  @ViewChild('hoverMenu') hoverMenuTrigger: MatMenuTrigger;
  @ViewChild('tagsAndBranches') matMenuTrigger: MatMenuTrigger;
  @ViewChild(MatTabGroup) tabGroup: MatTabGroup;

  TitleToShow: string;
  absolutePath: string;
  relativePath: string;
  connectionId: string;
  somethingIsChangedInTheBranch: boolean;
  somethingIsToPull: boolean;
  somethingIsToPush: boolean;
  howManyFilesAreToCommit: number;
  howManyCommitAreToPush: number;
  howManyFilesAreToPull: number;
  branches: IBranch[];
  taglist: ITag[];
  currentMdFile: MdFile
  public connectionIsActive: boolean = true;
  public isCheckingConnection: boolean = false;
  public filesAndAuthors: FileNameAndAuthor[];
  subscriptionserverSelectedMdFile: Subscription;
  public showMenu: boolean = false;

  //@Output() toggleSidenav = new EventEmitter<void>();
  constructor(
    public dialog: MatDialog,
    private monitorMDService: MdServerMessagesService,
    private http: HttpClient,
    private _snackBar: MatSnackBar,
    public mdFileService: MdFileService,
    private gitservice: GITService,
    private appSettings: AppCurrentMetadataService,
    private projectService: ProjectsService,
    private router: Router,
    private waitingDialogService: WaitingDialogService,
    private bookmarksService: BookmarksService,
    private navService: MdNavigationService,

  ) {
    this.TitleToShow = "MdExplorer";
    this.connectionIsActive = true;
  }

  ngOnInit(): void {

    this.monitorMDService.addMdProcessedListener(this.markdownFileIsProcessed, this);
    this.monitorMDService.addPdfIsReadyListener(this.showPdfIsready, this); //TODO: da spostare in SignalR
    this.monitorMDService.addMdRule1Listener(this.showRule1IsBroken, this);//TODO: da spostare in SignalR
    this.monitorMDService.addYamlAutoGeneratedListener(this.showYamlAutoGenerated, this);
    // get current branch name and if the branch has something to commit
    this.gitservice.currentBranch$.subscribe(branch => {
      this.currentBranch = branch.name;
      this.somethingIsChangedInTheBranch = branch.somethingIsChangedInTheBranch;
      this.howManyFilesAreToCommit = branch.howManyFilesAreChanged;
      this.howManyCommitAreToPush = branch.howManyCommitAreToPush;
      this.connectionIsActive = true;
    });

    this.gitservice.commmitsToPull$.subscribe(_ => {
      this.somethingIsToPull = _.somethingIsToPull;
      this.somethingIsToPush = _.howManyCommitAreToPush > 0;
      this.howManyFilesAreToPull = _.howManyFilesAreToPull;
      this.howManyCommitAreToPush = _.howManyCommitAreToPush;
      this.connectionIsActive = _.connectionIsActive;
      this.isCheckingConnection = false;
      this.filesAndAuthors = _.whatFilesWillBeChanged;
    });
    
    // Set initial project path if available
    const currentProject = this.projectService.currentProjects$.value;
    if (currentProject && currentProject.path) {
      this.gitservice.setProjectPath(currentProject.path);
    }
    
    // Subscribe to project changes to update Git service
    this.projectService.currentProjects$.subscribe(project => {
      if (project && project.path) {
        this.gitservice.setProjectPath(project.path);
      }
    });
    
    this.checkConnection();

    // manage resize fullscreen
    document.onfullscreenchange = (event) => {

      if (document.fullscreenElement) {
        this.screenType = "close_fullscreen";
      } else {
        this.screenType = "fullscreen";
      }
    };

    this.gitservice.getBranchList().subscribe(branches => {
      this.branches = branches;
    });



    // something is selected from treeview/sidenav
    this.mdFileService.selectedMdFileFromSideNav.subscribe(_ => {
      if (_ != null) {
        this.currentMdFile = _;
        this.mdFileService.navigationArray = [];
        this.absolutePath = _.fullPath;
        this.relativePath = _.relativePath;
      }
    });
    // something has changed on filesystem
    this.subscriptionserverSelectedMdFile = this.mdFileService.serverSelectedMdFile.subscribe(val => {

      var current = val[0];
      if (current != undefined) {
        let index = this.mdFileService.navigationArray.length;
        if (index > 0) {
          //if (current.fullPath == this.mdFileService.navigationArray[index - 1].fullPath) {
          if (current == this.mdFileService.navigationArray[index - 1]) {
            //return;
          }
        }

        this.navService.setNewNavigation(current);
        this.absolutePath = current.fullPath;
        this.relativePath = current.relativePath;
        this.currentMdFile = current;
      }

    });
  }


  ngOnDestroy(): void {
    console.log("ngOnDestroy toolbar");
    this.subscriptionserverSelectedMdFile.unsubscribe();
  }



  toggleSidenav() {
    let test = !this.appSettings.showSidenav.value;
    this.appSettings.showSidenav.next(test);
  }

  openRules(data: any): void {
    const dialogRef = this.dialog.open(RulesComponent, {
      width: 'auto',
      maxWidth: '90vw',
      disableClose: false,
      panelClass: 'subtle-dialog-panel',
      data: data
    });
    dialogRef.afterClosed().subscribe(_ => {
      if (_ && _.refactoringSourceActionId != undefined) {
        // User chose to apply suggestion
        this._snackBar.open('File renamed successfully', '', {
          duration: 2500,
          horizontalPosition: 'right',
          verticalPosition: 'bottom',
          panelClass: ['success-snackbar']
        });
        
        this.dialog.open(RenameFileComponent, {
          width: '600px',
          data: _
        });
      } else if (_ === null) {
        // User chose to keep current filename
        this._snackBar.open('Filename kept unchanged', '', {
          duration: 2000,
          horizontalPosition: 'right',
          verticalPosition: 'bottom',
          panelClass: ['subtle-snackbar']
        });
      }
    });
  }

  checkConnection(): void {
    this.isCheckingConnection = true;
    
    const projectPath = this.getProjectPath();
    if (!projectPath) {
      this.isCheckingConnection = false;
      return;
    }
    
    // Update the Git service with current project path
    this.gitservice.setProjectPath(projectPath);
    
    // Get both branch status and pull/push data using modern Git service
    forkJoin([
      this.gitservice.modernGetBranchStatus(projectPath),
      this.gitservice.modernGetDataToPull(projectPath)
    ]).subscribe(
      ([branch, pullData]) => {
        // Update observables with the received data
        this.gitservice.currentBranch$.next(branch);
        this.gitservice.commmitsToPull$.next(pullData);
        this.isCheckingConnection = false;
      },
      error => {
        console.error('Error checking Git connection:', error);
        this.isCheckingConnection = false;
        this.connectionIsActive = false;
      }
    );
  }

  private showRule1IsBroken(data: any, objectThis: ToolbarComponent) {
    objectThis.openRules(data);
  }

  private sendExportRequest(data, objectThis: ToolbarComponent) {
    const url = '../api/mdexport/' + objectThis.relativePath + '?connectionId=' + data;
    return objectThis.http.get(url)
      .subscribe(data => { console.log(data) });
  }

  private showPdfIsready(data: any, objectThis: ToolbarComponent) {
    let snackRef = objectThis._snackBar.open("seconds: " + data.executionTimeInSeconds, "Open folder", { duration: 5000, verticalPosition: 'top' });
    snackRef.onAction().subscribe(() => {
      const url = '../api/AppSettings/OpenChromePdf?path=' + data.path;
      return objectThis.http.get(url)
        .subscribe(data => { console.log(data) });
    });
  }

  private showYamlAutoGenerated(data: any, objectThis: ToolbarComponent) {
    objectThis._snackBar.open(data.message, 'OK', {
      duration: 4000,
      verticalPosition: 'top',
      panelClass: ['warning-snackbar']
    });
  }

  private markdownFileIsProcessed(data: MdFile, objectThis: ToolbarComponent) {
    objectThis.currentMdFile = data;
    objectThis.mdFileService.navigationArray.push(data);
    objectThis.mdFileService.setSelectedMdFileFromServer(data);
  }

  OpenEditor() {
    const url = '../api/AppSettings/OpenFile?path=' + this.absolutePath;
    return this.http.get(url)
      .subscribe(data => { console.log(data) });
  }

  Export() {
    this._snackBar.open("Export request queued!", null, { duration: 2000, verticalPosition: 'top' });
    this.monitorMDService.getConnectionId(this.sendExportRequest, this);
  }


  public screenType = "fullscreen";

  FullScreenToggle(): void {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else {
      document.exitFullscreen();
    }

  }

  pull(): void {
    const projectPath = this.getProjectPath();
    if (!projectPath) return;
    
    let info = new WaitingDialogInfo();
    info.message = "Please wait... Pulling branch"
    this.waitingDialogService.showMessageBox(info);
    
    console.log('[DEBUG] Pull operation started with projectPath:', projectPath);
    
    // Use modern Git service with native SSH authentication
    this.gitservice.modernPull(projectPath).subscribe(
      responseFromPull => {
        console.log('[DEBUG] Pull response received:', responseFromPull);
        this.handleGitResponse(responseFromPull, 'pull');
        this.waitingDialogService.closeMessageBox();
      },
      error => {
        console.error('[DEBUG] Pull error:', error);
        console.error('[DEBUG] Error status:', error.status);
        console.error('[DEBUG] Error message:', error.message);
        console.error('[DEBUG] Error response body:', error.error);
        
        this.waitingDialogService.closeMessageBox();
        
        // Show error to user
        const errorMessage = error.error?.errorMessage || error.message || 'An error occurred during pull';
        this._snackBar.open(`Pull failed: ${errorMessage}`, 'OK', {
          duration: 5000,
          verticalPosition: 'top',
          panelClass: ['error-snackbar']
        });
      }
    );
  }

  /**
   * Handles Git operation responses for both legacy and modern services
   */
  public handleGitResponse(responseFromPull: any, operation: string): void {
    // Handle connection issues
    if (responseFromPull.isConnectionMissing) {
      const dialogRef = this.dialog.open(GitMessagesComponent, {
        width: '300px',
        data: {
          message: 'Missing connection',
          description: 'Please verify your vpn or network settings'
        }
      });
      return;
    }

    // Note: Modern Git uses SSH authentication, no manual credentials needed

    // Handle conflicts
    if (responseFromPull.thereAreConflicts) {
      const dialogRef = this.dialog.open(GitMessagesComponent, {
        width: '300px',
        data: {
          message: 'Conflicts appear',
          description: responseFromPull.errorMessage
        }
      });
      return;
    }

    // Success case - update the file tree for pull operations
    if (operation === 'pull' && responseFromPull.whatFilesWillBeChanged) {
      let bCurrentfileHasBeenDeleted = false;
      responseFromPull.whatFilesWillBeChanged.forEach(file => {
        if (file.status === "Added") {
          const folders = _.cloneDeep(file.mdFiles);
          folders.pop();
          this.mdFileService.addNewDirectoryExtended(folders);
          this.mdFileService.addNewFile(file.mdFiles);
        }

        if (file.status === "Deleted") {
          if (file.fullPath === this.currentMdFile.fullPath) {
            bCurrentfileHasBeenDeleted = true;
          }
          this.mdFileService.recursiveDeleteFileFromDataStore(file.mdFiles[file.mdFiles.length - 1]);
        }
      });

      if (!bCurrentfileHasBeenDeleted) {
        this.mdFileService.setSelectedMdFileFromSideNav(this.currentMdFile);
      }
    }

    // Always refresh connection status after successful operations
    this.checkConnection();
  }

  /**
   * Validates and returns the current project path.
   * Shows error if no project is selected.
   */
  private getProjectPath(): string | null {
    const currentProject = this.projectService.currentProjects$.value;
    
    if (!currentProject || !currentProject.path) {
      console.error('No current project path available');
      this._snackBar.open('No project selected. Please select a project first.', 'OK', { 
        duration: 3000,
        verticalPosition: 'top',
        panelClass: ['error-snackbar']
      });
      return null;
    }
    
    return currentProject.path;
  }

  commit(): void {
    const projectPath = this.getProjectPath();
    if (!projectPath) return;
    
    // Ask user for commit message using Material Dialog
    const dialogRef = this.dialog.open(CommitMessageDialogComponent, {
      width: '500px',
      data: { defaultMessage: 'Update from MdExplorer' }
    });

    dialogRef.afterClosed().subscribe(commitMessage => {
      if (commitMessage === null || commitMessage === undefined) {
        // User cancelled
        return;
      }
      
      let info = new WaitingDialogInfo();
      info.message = "Please wait... committing changes";
      this.waitingDialogService.showMessageBox(info);
      
      console.log('[DEBUG] Commit operation started with projectPath:', projectPath, 'and message:', commitMessage);
      
      // Use modern Git service with native SSH authentication (commit only)
      this.gitservice.modernCommit(projectPath, commitMessage).subscribe(
        response => {
          console.log('[DEBUG] Commit response received:', response);
          this.handleGitResponse(response, 'commit');
          this.waitingDialogService.closeMessageBox();
          this.matMenuTrigger.closeMenu();
        },
        error => {
          console.error('[DEBUG] Commit error:', error);
          console.error('[DEBUG] Error status:', error.status);
          console.error('[DEBUG] Error message:', error.message);
          console.error('[DEBUG] Error response body:', error.error);
          
          this.waitingDialogService.closeMessageBox();
          
          // Show error to user
          const errorMessage = error.error?.errorMessage || error.message || 'An error occurred during commit';
          this._snackBar.open(`Commit failed: ${errorMessage}`, 'OK', {
            duration: 5000,
            verticalPosition: 'top',
            panelClass: ['error-snackbar']
          });
        }
      );
    });
  }

  push(): void {
    const projectPath = this.getProjectPath();
    if (!projectPath) return;
    
    let info = new WaitingDialogInfo();
    info.message = "Please wait... pushing changes";
    this.waitingDialogService.showMessageBox(info);
    
    console.log('[DEBUG] Push operation started with projectPath:', projectPath);
    
    // Use modern Git service with native SSH authentication
    this.gitservice.modernPush(projectPath).subscribe(
      response => {
        console.log('[DEBUG] Push response received:', response);
        this.handleGitResponse(response, 'push');
        this.waitingDialogService.closeMessageBox();
        this.matMenuTrigger.closeMenu();
      },
      error => {
        console.error('[DEBUG] Push error:', error);
        console.error('[DEBUG] Error status:', error.status);
        console.error('[DEBUG] Error message:', error.message);
        console.error('[DEBUG] Error response body:', error.error);
        
        this.waitingDialogService.closeMessageBox();
        
        // Show error to user
        const errorMessage = error.error?.errorMessage || error.message || 'An error occurred during push';
        this._snackBar.open(`Push failed: ${errorMessage}`, 'OK', {
          duration: 5000,
          verticalPosition: 'top',
          panelClass: ['error-snackbar']
        });
      }
    );
  }

  commitAndPush(): void {
    const projectPath = this.getProjectPath();
    if (!projectPath) return;
    
    // Ask user for commit message using Material Dialog
    const dialogRef = this.dialog.open(CommitMessageDialogComponent, {
      width: '500px',
      data: { defaultMessage: 'Update from MdExplorer' }
    });

    dialogRef.afterClosed().subscribe(commitMessage => {
      if (commitMessage === null || commitMessage === undefined) {
        // User cancelled
        return;
      }
      
      let info = new WaitingDialogInfo();
      info.message = "Please wait... committing and pushing changes";
      this.waitingDialogService.showMessageBox(info);
      
      console.log('[DEBUG] Commit and push operation started with projectPath:', projectPath, 'and message:', commitMessage);
      
      // Use modern Git service with native SSH authentication (commit and push)
      this.gitservice.modernCommitAndPush(projectPath, commitMessage).subscribe(
        response => {
          console.log('[DEBUG] Commit and push response received:', response);
          this.handleGitResponse(response, 'commit and push');
          this.waitingDialogService.closeMessageBox();
          this.matMenuTrigger.closeMenu();
        },
        error => {
          console.error('[DEBUG] Commit and push error:', error);
          console.error('[DEBUG] Error status:', error.status);
          console.error('[DEBUG] Error message:', error.message);
          console.error('[DEBUG] Error response body:', error.error);
          
          this.waitingDialogService.closeMessageBox();
          
          // Show error to user
          const errorMessage = error.error?.errorMessage || error.message || 'An error occurred during commit and push';
          this._snackBar.open(`Commit and push failed: ${errorMessage}`, 'OK', {
            duration: 5000,
            verticalPosition: 'top',
            panelClass: ['error-snackbar']
          });
        }
      );
    });
  }

  openBranch(branch: IBranch): void {
    this.gitservice.checkoutSelectedBranch(branch).subscribe(_ => {
      this.currentBranch = _.name;
      var mdFile = new MdFile("Welcome to MDExplorer", '/../welcome.html', 0, false);
      mdFile.relativePath = '/../../welcome.html';
      this.mdFileService.setSelectedMdFileFromSideNav(mdFile);
      this.projectService.setNewFolderProject(_.fullPath);

    });
    this.matMenuTrigger.closeMenu();
  }

  bookmarkToggle(): void {
    let bookmark: Bookmark = new Bookmark(this.currentMdFile);
    bookmark.projectId = this.projectService.currentProjects$.value.id;
    this.bookmarksService.toggleBookmark(bookmark);
  }

  openReactEditor(): void {
    // Navigate to the route defined in MdExplorerModule
    // Assumes MdExplorerModule is loaded under '/main' and 'navigation' is a parent route segment
    this.router.navigate(['/main/navigation/react-editor']);
  }
}
